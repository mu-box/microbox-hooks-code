#!/usr/bin/env ruby

# Stop the app
#
# 1 - Stop app; Remove sv definitions for app start
# 2 - Stop narc; Remove sv definitions for narc
# 3 - Stop cron; Remove sv definitions for cron

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Microbox::Engine

require 'timeout'

if payload[:logvac_host]
  logger = Microbox::Logvac.new(host: payload[:logvac_host], hostname: payload[:component][:uid], id: "#{payload[:component][:uid]}.#{payload[:member][:uid]}[stop]")
else
  logger = $stdout
end

# 1 - Stop app; Remove sv definitions for app start
start_cmds.each do |key, cmd|
  logger.puts("Stopping #{key}: #{cmd}...")

  service key do
    action stop_forces[key] ? :force_stop : :disable
    timeout stop_timeouts[key]
    not_if { !Dir.exist?("/etc/service/#{key}") }
  end

  directory "/etc/service/#{key}" do
    action :delete
    not_if { !Dir.exist?("/etc/service/#{key}") }
  end

end

if ! `pgrep -U gomicro`.empty?
  `pkill -U gomicro -SIGTERM`
end

ensure_socket 'web' do
  interface 'eth0'
  port '8080'
  action :no_connections
  max_checks 300 # todo: make variable
end

# 2 - Stop narc; Remove sv definitions for narc
logger.puts("Stopping logging service...")
service 'narc' do
  action :disable
  not_if { !Dir.exist?('/etc/service/narc') }
end

directory '/etc/service/narc' do
  action :delete
  not_if { !Dir.exist?('/etc/service/narc') }
end

# 3 - Stop cron; Remove sv definitions for cron

logger.puts("Stopping cron service...")
service 'cron' do
  action :disable
  not_if { !Dir.exist?('/etc/service/cron') }
end

directory '/etc/service/cron' do
  action :delete
  not_if { !Dir.exist?('/etc/service/cron') }
end

begin
  Timeout::timeout(60) do
    while ! `pgrep -U gomicro`.empty? do
      sleep 1
    end
  end
rescue
  `pkill -U gomicro -SIGKILL`
end

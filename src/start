#!/usr/bin/env ruby

# Start the app
#
# 1 - Import sv definitions for narc; start narc
# 2 - Import sv definitions for cron; start cron if needed
# 3 - Import sv definitions for app start; start app

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Microbox::Engine

if payload[:logvac_host]
  logger = Microbox::Logvac.new(host: payload[:logvac_host], hostname: payload[:component][:uid], id: "#{payload[:component][:uid]}.#{payload[:member][:uid]}[start]")
else
  logger = $stdout
end

# 1 - Import sv definitions for narc; start narc
if File.exist?('/opt/gomicro/etc/narc.conf')
  logger.puts("Starting logging service...")
  # create the runit definitions for narc
  directory '/etc/service/narc' do
    recursive true
  end

  directory '/etc/service/narc/log' do
    recursive true
  end

  hook_file '/etc/service/narc/log/run' do
    source 'runit/narc-log'
    mode 0755
  end

  hook_file '/etc/service/narc/run' do
    source 'runit/narc'
    mode 0755
  end

  service 'narc' do
    action :enable
  end
end

# 2 - Import sv definitions for cron; start cron if needed

if Dir.exist? "/opt/microbox/cron"
  directory '/etc/service/cron'

  hook_file '/etc/service/cron/run' do
    source 'runit/cron'
    mode 0755
  end
end

# 3 - Import sv definitions for app start; start app

start_cmds.each do |key, cmd|
  logger.puts("Starting #{key}: #{cmd}...")
  # create the runit definition
  directory "/etc/service/#{key}" do
    recursive true
  end

  directory "/etc/service/#{key}/log" do
    recursive true
  end

  template "/etc/service/#{key}/log/run" do
    source 'runit/app-log.erb'
    variables ({
      key: key,
      command: cmd
    })
    mode 0755
  end

  code_dir = cwds[key] ? "#{APP_DIR}/#{cwds[key]}" : APP_DIR

  template "/etc/service/#{key}/run" do
    source 'runit/app.erb'
    variables ({
      key: key,
      command: cmd,
      env_dir: ENV_DIR,
      profile_dir: PROFILE_DIR,
      code_dir: code_dir
    })
    mode 0755
  end

  if stop_cmds[key]
    directory "/etc/service/#{key}/control" do
      recursive true
    end

    template "/etc/service/#{key}/control/d" do
      source 'runit/d.erb'
      variables ({
        key: key,
        command: stop_cmds[key],
        env_dir: ENV_DIR,
        profile_dir: PROFILE_DIR,
        code_dir: code_dir
      })
      mode 0755
    end
  end

  service key do
    action :enable
  end

end
